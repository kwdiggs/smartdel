#!/bin/bash
# Keenan Diggs 2014

recbin='smartdel_recycle'			# name of recycle bin
table='.table.txt'				# name of recycle bin table
integer='^[0-9]+$'                              # regex expression detects integers
question='?'					# question mark
under='_'                                       # underscore
slash='/'                                       # forward slash
one='_1'					# underscore 1
parenth=')'					# closing parentheses
ast='*'						# asterisk

# create recycle bin
if [ ! -d ~/$recbin ]
then
	dir=$PWD
	cd ~
	mkdir $recbin
	cd $dir
fi

# create table
if [ ! -f ~/$recbin/$table ]
then
	dir=$PWD
	cd ~/$recbin
	echo > $table
	cd $dir
fi

# >> helper of delete()
# log the 2-tuple into the recycle bin table
log () {
	tuple="$1 $2"

	# only if it doesn't already exist in the table
	if ! grep -Fxq "$tuple" ~/$recbin/$table
	then
		echo "$tuple" >> ~/$recbin/$table
	fi
}

# >> helper of delete()
# ensure filename uniquness of the form: name_versionNumber
ensure_unique () {
	# human readable variable
	filename=$1$one

       	# increment suffix if filename already in use
        if [ -f ~/$recbin/$filename ]
        then
		# remove suffix num, increment, re-concatenate
               	while [ -f ~/$recbin/$filename ]
               	do
                       	num="${filename##*_}"
                       	num=`expr $num + 1`
                       	num=$under$num
                       	filename="${filename%_*}"
                       	filename=$filename$num
               	done
        fi

	echo "$filename"
}

# >> helper of delete()
# **if input is of the format: /home/path/filename; ~/path/filename; ../filename; ./filename; subdir/filename
# ~then store the path and retrieve the filename**
path_for_table () {
	filename="$1"

        # all paths contain slashes
        if [[ "$filename" == *"$slash"* ]]
        then
                # get the path and name of the file
                file_path="${filename%/*}"
                filename="${filename##*/}"

                # if input begins with /, or ~, do not prepend $PWD; otherwise prepend $PWD
                if [[ "$file_path" == /* ]] || [[ "$file_path" == ~* ]]
                then
                        file_path=$file_path$slash
                else
                        file_path=$PWD$slash$file_path$slash
                fi
        fi

	echo "$file_path"
}


# >> called by getops()
# move file to bin, log filename and path in table
delete () {
	# new filename to be used
	filename="$1"

	# account for wildcards
	if not_empty $filename
	then
		for filename in `find $filename`
		do
			# if user tries to delete nonexistant file, display error message and terminate
			if [ ! -f "$filename" ] && [ ! -d "$filename" ]
			then
				echo "smartdel: cannot delete '$filename': no such file exists"
				return
			# account for directories
			elif [[ -d "$filename" ]]
			then
				echo "smartdel: cannot smartdel '$filename': it is a directory"
				return
			fi

			# get 2-tuple for table
			file_path=$(path_for_table "$filename")
			filename2="${filename##*/}"
			filename2=$(ensure_unique "$filename2")

			# move and log in recycle bin table
			if [ -n "$file_path" ]
			then
				mv $filename ~/$recbin/"$filename2"
                		log $filename2 $file_path
			else
				mv $filename ~/$recbin/"$filename2"
                		log $filename2 $PWD$slash
			fi

		done
	else
		echo "smartdel: '$filename' does not exist at this directory"
	fi
}

# >> helper of restore()
# removes a 2-tuple from table when the corresponding file leaves the recycle bin, returns the path
clean_table () {
	# get the path portion of the 2-tuple and append it to a search string after filename
	filename=$1
	path=$(grep "$1" ~/$recbin/$table | head -1 | cut -f 2 -d ' ')
        search_str="$filename $path"

	# replace 2-tuple with a blank line, then remove blank lines from the file
        sed -i "s@^$search_str@@" ~/$recbin/$table
        sed -i "/^$/d" ~/$recbin/$table

	path=$path$slash
	echo "$path"
}

# >> helper of restore()
# displays a numbered list of files
list_options () {
	array=("${!1}")

	echo "smartdel: multiple files with  name '$filename' exist. Please choose one to restore."
        option="0"
        for version in "${array[@]}"
        do
        	# get name and time last edited, display as an option
                name="${version##*/}"
                time=$(stat -c%y $version)
                path=$(grep "$name" ~/$recbin/$table | head -1 | cut -f 2 -d ' ')
                echo "$option$parenth last edited: $time | name: $name | source dir: $path"

                # increment option
                let "option=$option+1"
        done
}

# >> helper of restore()
# move the file from bin to appropriate filepath as stored in array
move_item () {
	skip="$2"

	# user input to restore file
        read choice
	array=("${!1}")
        declare -A used

	# user must choose a valid array index
        if [[ $choice =~ $integer ]] && [ "${array[$choice]}" ]
        then
        	# get filename currently in bin
                name="${array[$choice]}"
                cur_name="${name##*/}"
                path=$(clean_table $cur_name)
                name="${cur_name%_*}"

		if [ ! "$skip" ]
		then
                	# restore the file to the current directory, recover the original name
                	mv "${array[$choice]}" ./$name
		else
			mv "${array[choice]}" $path$slash$name
		fi
        else
                echo "invalid input"
                exit
        fi
}

# >> helper of restore(), separate()
# helper method for wildcard file searches
not_empty () {
        [[ -f $1 ]]
}

# >> called by separate()
# move files from recycle bin to current directory, suppports -r and -o
restore () {
	# human readable variables, searchstring, and array to hold path/to/filename strings
        filename="$1"
	if [[ "$filename" == *"*"* ]]; then str=$filename$ast; else str=$filename$under$ast; fi
	declare -a array
	declare -A paths
	count="1"

	# for use in smartdel -s
	skip="$2"
	spec_path="$3"

	# search for all versions of file, add to array
	if not_empty ~/$recbin/$str
	then
		for f in `find ~/$recbin/$str`
		do
			# smartdel -r, -o: filename used only once
			if [ "$skip" != "skip" ] || [ "$skip" == "overlook" ]
			then
				array[$count]=$f
				let "count=$count+1"

			# smartdel -s: filename/pathname 2-tuple used only once
			else
                               	name="${f##*/}"
                               	path=$(grep "$name" ~/$recbin/$table | head -1 | cut -f 2 -d ' ')

                               	if [ "$path" == "$spec_path" ]
                               	then
                                       	array[$count]=$f
                                       	let "count=$count+1"
                               	fi
			fi
		done
	# display error message if nothing could be found from user-generated search string
	else
           	echo "smartdel: file '$filename' not found in recycle bin"
	fi

	# if more than one option exists, allow user to choose based on time last edited
        if [ $count -gt "2" ]
        then
        	list_options array[@]
                move_item array[@] $skip

        # only 1 file
        elif [ $count -eq "2" ]
        then
        	# clean bin table
                name="${array[1]}"
                name="${name##*/}"
                path=$(clean_table $name)
                name="${name%_*}"

                # move the file
		if [ "$skip" != "skip" ] && [ "$skip" != "overlook" ]
		then
                       	mv "${array[1]}" ./$name
		else
			mv "${array[1]}" $path$name
		fi
        fi
}

# >> called by getopts()
# expands wilcards, collect duplicates, pass files to restore()
separate () {
	value="$1"
	skip="$2"
	declare -A array

	# account for wildcard patterns when manipulating files
	if [[ "$value" == *"*"* ]] || [[ "$value" == *"?"* ]]
       	then
        	#if [[ "$value" == *"?"* ]]; then value=$value$under$ast; fi
		value=$value$under$ast
                if not_empty ~/$recbin/$value
                then
                        for result in `find ~/$recbin/$value`
                       	do
                                result="${result##*/}"
        			prefix="${result%_*}"
        			path=$(grep "$result" ~/$recbin/$table | head -1 | cut -f 2 -d ' ')

			        # smartdel -r, -o a filename once
			        if [ ! "$skip"  ] || [ "$skip" == "overlook" ]
			        then
			                if [ ! "${array[$prefix]}" ]
			                then
			                        array[$prefix]="in use"
			                        restore $prefix $skip $path
			                fi
			        # smartdel -s the filename once per directory
			        else
			                if [ ! "${array[$path$prefix]}" ]
			                then
			                        array[$path$prefix]="combo in use"
			                        restore $prefix $skip "$path"
			                fi
        			fi
                        done
             	else
                        echo "smartdel: cannot restore '$1'. No such file in recycle bin"
                fi

	# without wildcards
        else
		# smartdel -r, -o
		if [ ! "$skip" ] || [ "$skip" == "overlook" ]
		then
                	restore "$1" "$skip"
		# smartdel -s
		elif not_empty ~/$recbin/$value$under$ast
		then
			for result in `find ~/$recbin/$value$under$ast`
			do
				result="${result##*/}"
                                prefix="${result%_*}"
                                path=$(grep "$result" ~/$recbin/$table | head -1 | cut -f 2 -d ' ')


			        # smartdel -s the filename once per directory
		                if [ ! "${array[$path$prefix]}" ]
		                then
                       			array[$path$prefix]="combo in use"
		                        restore $prefix $skip "$path"
               			fi
			done
		fi
        fi
}

# >> called by getops()
# deletes contents of the recycle bin and table
empty_bin () {
	echo "" > ~/$recbin/$table
	if not_empty ~/$recbin/$ast; then rm ~/$recbin/$ast; fi
}

# paramaterize the option if option was given. Else, skip this function
while getopts ":d:r:o:s:c " opt;
do
	# smartdel -c, completely empties the recycle bin and clears the table
	if [ "$opt" == "c" ]; then empty_bin; exit; fi

	# ensure at lease 1 paramater has been passed in
	if [ ! -n "$2" ]; then echo "smartdel: paramaters must be specified"; exit; fi

	# if multiple parameters are passed in, process $2 and shift down
	while [ -n "$2" ]
	do
		case $opt in
			# smartdel -d, supports wildcards/identical names
               		d) delete "$2" ;;

			# smartdel -r, supports wildcards/identical names
               		r) separate "$2" ;;

			# smartdel -o, supports wildcards and identical names, single file restore
			o) separate "$2" "overlook" ;;

			# smartdel -s, supports wildcards and identical names, multiple file restore
			s) separate "$2" "skip" ;;

			# don't proceed with invalid arguments
               		\?) echo "smartdel: invalid command '-$OPTARG'"
			    exit  ;;
       		esac
		shift
	done
	exit
done

# smartdel with no options, identical to smartdel -d
while [ -n "$1" ]
do
	delete "$1"
	shift
done

